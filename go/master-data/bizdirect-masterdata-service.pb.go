// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bizdirect-masterdata-service.proto

package com_gonuclei_masterdata_v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("bizdirect-masterdata-service.proto", fileDescriptor_a95881ce64d505c5) }

var fileDescriptor_a95881ce64d505c5 = []byte{
	// 1267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0x51, 0x6f, 0x1b, 0x45,
	0x10, 0x96, 0x5f, 0x40, 0x2c, 0x90, 0x84, 0x6b, 0x92, 0xb6, 0x2e, 0x02, 0x54, 0x1e, 0x40, 0x4d,
	0x7d, 0x69, 0x1a, 0xda, 0x52, 0xc4, 0x8b, 0xe3, 0x34, 0x6e, 0xa4, 0xa4, 0x44, 0xb1, 0x9b, 0x02,
	0x2a, 0x52, 0xd7, 0x77, 0x13, 0x7b, 0xeb, 0xbb, 0x5b, 0x77, 0x6f, 0x2e, 0xe0, 0x08, 0x21, 0x21,
	0x84, 0x10, 0x3c, 0xf0, 0xcc, 0x2f, 0xe3, 0xf7, 0xa0, 0xbd, 0xdb, 0x3d, 0xdf, 0x39, 0xf6, 0xde,
	0x3a, 0x20, 0xfa, 0x16, 0xe5, 0xbe, 0x6f, 0xbe, 0x6f, 0x76, 0x77, 0x76, 0x66, 0x4d, 0x6e, 0xf6,
	0xd8, 0xb9, 0xcf, 0x04, 0x78, 0xd8, 0x08, 0x69, 0x8c, 0x20, 0x7c, 0x8a, 0xb4, 0x11, 0x83, 0x38,
	0x63, 0x1e, 0xb8, 0x23, 0xc1, 0x91, 0x3b, 0x75, 0x8f, 0x87, 0x6e, 0x9f, 0x47, 0x89, 0x17, 0x00,
	0x73, 0x27, 0x30, 0xf7, 0x6c, 0xab, 0x7e, 0xa3, 0xcf, 0x79, 0x3f, 0x80, 0xcd, 0x14, 0xd9, 0x4b,
	0x4e, 0x37, 0x21, 0x1c, 0xe1, 0x38, 0x23, 0xd6, 0xd7, 0x04, 0xc4, 0x23, 0x1e, 0xc5, 0xd0, 0x88,
	0x91, 0x62, 0x12, 0xab, 0x7f, 0x7f, 0x3c, 0x53, 0x33, 0x84, 0x38, 0xa6, 0x7d, 0xd0, 0xa0, 0xd5,
	0xec, 0x53, 0xc3, 0xe3, 0x61, 0xc8, 0x23, 0xf5, 0xdf, 0xbb, 0x7f, 0xbb, 0xa4, 0xbe, 0xa3, 0xd9,
	0x87, 0x39, 0xb9, 0x93, 0xf9, 0x75, 0xbe, 0x21, 0x4b, 0x6d, 0xc0, 0x66, 0x10, 0x1c, 0x51, 0x81,
	0x11, 0x88, 0xd8, 0x59, 0x77, 0x33, 0x83, 0xae, 0x36, 0xe8, 0x3e, 0x92, 0x06, 0xeb, 0x9b, 0xee,
	0xfc, 0xa4, 0x5c, 0xc5, 0x3e, 0x60, 0x31, 0x1e, 0xab, 0x0c, 0x9c, 0x9f, 0x6b, 0x64, 0xb5, 0x0d,
	0xa8, 0x3e, 0x35, 0x11, 0x05, 0xeb, 0x25, 0x08, 0xb1, 0xb3, 0x6d, 0x11, 0x29, 0x87, 0x1f, 0xc3,
	0xab, 0x04, 0x62, 0xac, 0x7f, 0xb6, 0x18, 0x49, 0x79, 0xf8, 0xb3, 0x46, 0x6e, 0x4c, 0x3c, 0x3c,
	0x63, 0x38, 0x68, 0x06, 0x41, 0xc1, 0xca, 0x7d, 0x9b, 0xa8, 0x05, 0x86, 0x76, 0xf3, 0x60, 0x61,
	0x9e, 0x32, 0xf4, 0x1d, 0x59, 0xc9, 0xd6, 0xbb, 0x60, 0x62, 0xde, 0x8a, 0x6f, 0x99, 0x44, 0x4a,
	0x21, 0xf2, 0xf0, 0x2f, 0xc8, 0x6a, 0xd3, 0xf7, 0x2f, 0x2e, 0xb9, 0xd1, 0xef, 0x2c, 0x86, 0x4e,
	0x74, 0xd9, 0xd5, 0xb1, 0x3b, 0xe9, 0x81, 0x74, 0x7e, 0x20, 0x57, 0x27, 0x0b, 0xda, 0xf1, 0x87,
	0x05, 0x91, 0x86, 0xc5, 0xa2, 0x74, 0xfc, 0xa1, 0x0e, 0xed, 0xda, 0xc2, 0x55, 0x6e, 0x03, 0x42,
	0x26, 0xca, 0x66, 0xb1, 0x09, 0x4e, 0x8b, 0x6d, 0x58, 0x88, 0xe5, 0x4a, 0x2f, 0xc9, 0xdb, 0x93,
	0x08, 0xb1, 0x73, 0xcb, 0x8a, 0x9b, 0xe9, 0x2c, 0x5c, 0x25, 0x1d, 0xb2, 0xf4, 0x74, 0xe4, 0x53,
	0x84, 0x5c, 0xee, 0x8e, 0x45, 0x88, 0x8c, 0x32, 0x77, 0x93, 0x9e, 0xeb, 0x53, 0xd6, 0xa2, 0x08,
	0x7d, 0x2e, 0x98, 0xe1, 0x94, 0x19, 0xe5, 0x14, 0x7f, 0x5c, 0xb2, 0xfc, 0x3d, 0x59, 0x3a, 0xa1,
	0x01, 0x93, 0x0e, 0x1e, 0x45, 0xc8, 0x70, 0xec, 0x18, 0x4f, 0x6a, 0x86, 0xd1, 0x0c, 0xed, 0xf9,
	0xee, 0x22, 0x14, 0x25, 0x1c, 0x91, 0x77, 0xdb, 0x80, 0x85, 0x9c, 0x36, 0x6c, 0xbc, 0x6b, 0xc5,
	0xc5, 0x13, 0x3d, 0x21, 0x2b, 0xd9, 0x42, 0x17, 0x24, 0xb7, 0x6c, 0xa2, 0x54, 0x6c, 0xcf, 0x69,
	0x7a, 0x31, 0x4e, 0xb6, 0x67, 0x7c, 0x02, 0x91, 0xcf, 0xc5, 0xdc, 0x2d, 0xba, 0x6f, 0xa3, 0x99,
	0xc5, 0x28, 0xf9, 0xff, 0x89, 0xbc, 0x37, 0x59, 0x2f, 0x2d, 0xb2, 0x65, 0x1f, 0x4c, 0x27, 0x70,
	0x59, 0xfd, 0x17, 0x64, 0xb5, 0xb4, 0x7e, 0xda, 0xc2, 0x03, 0xfb, 0x78, 0x15, 0x2b, 0xf9, 0x2d,
	0x59, 0x56, 0x2b, 0xc9, 0x93, 0x08, 0x8d, 0xe7, 0xdc, 0x58, 0x99, 0x19, 0xbd, 0xbc, 0xfb, 0xaf,
	0xd2, 0xd6, 0xa8, 0xbe, 0xec, 0x47, 0xa7, 0xdc, 0x71, 0x2d, 0x42, 0x48, 0xa0, 0xd5, 0x65, 0x50,
	0xc2, 0x2b, 0xc9, 0x21, 0x79, 0x27, 0x97, 0x94, 0xb9, 0xdc, 0xb2, 0x08, 0xb0, 0x88, 0x58, 0x29,
	0xbf, 0x2e, 0x59, 0x56, 0xbb, 0x93, 0xeb, 0xdd, 0xb1, 0x88, 0x51, 0xb1, 0x23, 0xe7, 0xe4, 0x4a,
	0xb6, 0x23, 0x9d, 0xa4, 0x67, 0x5b, 0x36, 0x25, 0xf4, 0xbf, 0xa8, 0x57, 0x4c, 0xaf, 0xbd, 0xb2,
	0xb0, 0x71, 0xcf, 0xfe, 0x13, 0x55, 0x41, 0xde, 0xea, 0x03, 0xb6, 0x18, 0x8e, 0xf7, 0x7d, 0x73,
	0x9e, 0x07, 0xdc, 0xa3, 0xc8, 0x78, 0xb4, 0x0b, 0x48, 0x59, 0x60, 0x75, 0x13, 0x4e, 0x53, 0x94,
	0xe6, 0xef, 0x35, 0x52, 0x6f, 0x03, 0x7e, 0x45, 0x13, 0x1c, 0x1c, 0x09, 0x7e, 0xc6, 0x7c, 0x10,
	0xbb, 0x14, 0xe9, 0xce, 0xf8, 0x09, 0x0d, 0xc1, 0x31, 0x0e, 0x4b, 0x17, 0x48, 0xda, 0xc8, 0xbd,
	0x05, 0x59, 0xca, 0xcb, 0x6f, 0x35, 0x72, 0x6d, 0xb6, 0x97, 0x7d, 0xff, 0xff, 0x75, 0xf2, 0x4b,
	0x8d, 0x38, 0x6d, 0xc0, 0xc7, 0x5c, 0xf6, 0x8d, 0x71, 0x8b, 0x06, 0x10, 0xf9, 0x54, 0x38, 0xf7,
	0x2a, 0x46, 0x85, 0x29, 0xbc, 0xd5, 0xad, 0x37, 0x8b, 0xa6, 0x5c, 0x8c, 0x89, 0xd3, 0xf4, 0xfd,
	0x69, 0x13, 0xc6, 0x56, 0x35, 0x05, 0xbe, 0xb4, 0xf4, 0x8f, 0x64, 0x2d, 0x2b, 0xcf, 0xd7, 0xa2,
	0xfe, 0x92, 0x5c, 0x9f, 0xa9, 0xbe, 0x93, 0x04, 0x43, 0xe7, 0xcb, 0x05, 0x1c, 0x48, 0x42, 0xc5,
	0x35, 0xd3, 0x23, 0x6b, 0xbb, 0x10, 0xc0, 0xc5, 0x4c, 0x3f, 0x5f, 0x40, 0x27, 0x8b, 0x30, 0x57,
	0xe3, 0x69, 0x7a, 0x1b, 0xcb, 0xcb, 0x09, 0xa9, 0x69, 0x4e, 0x37, 0x8e, 0xa2, 0x29, 0x77, 0x46,
	0x5f, 0x39, 0xa2, 0xe3, 0x10, 0x22, 0x3c, 0xe4, 0x3e, 0x38, 0x15, 0x93, 0x70, 0x0e, 0xb4, 0x1c,
	0x32, 0x0b, 0xf8, 0x7c, 0x74, 0x96, 0x03, 0xed, 0x21, 0x20, 0x95, 0x28, 0xf3, 0x69, 0xd0, 0x28,
	0x2d, 0x76, 0xdb, 0x0e, 0x9c, 0x8f, 0x68, 0x52, 0xa9, 0x2d, 0x98, 0x2f, 0x73, 0x36, 0x67, 0x56,
	0x00, 0x5a, 0x65, 0x56, 0xc2, 0x2b, 0xbd, 0xe7, 0xe4, 0xcd, 0xa6, 0xef, 0x77, 0x59, 0x00, 0xce,
	0x27, 0x26, 0xae, 0x44, 0x68, 0x91, 0x4f, 0xab, 0x81, 0x2a, 0xfa, 0xd7, 0x84, 0x64, 0xe7, 0x30,
	0x15, 0xf8, 0xa8, 0x8a, 0xb7, 0x40, 0xe4, 0x5e, 0xea, 0x5b, 0xa6, 0x63, 0x6e, 0xf2, 0x0a, 0x64,
	0xf5, 0x8c, 0xc9, 0xb1, 0xf9, 0xae, 0x5f, 0x6d, 0xc6, 0x31, 0xf7, 0x18, 0x45, 0x90, 0x1f, 0xba,
	0x3c, 0x7f, 0x63, 0x18, 0xab, 0xb1, 0x44, 0x92, 0x6f, 0x66, 0x4d, 0x9b, 0x5b, 0x29, 0x5d, 0x5d,
	0x29, 0x2d, 0x86, 0xa6, 0x19, 0xcc, 0x78, 0x96, 0x64, 0x07, 0x2d, 0xed, 0x6d, 0x76, 0x6a, 0xd3,
	0xc6, 0x2a, 0xa7, 0xaf, 0x8d, 0x2a, 0x72, 0x71, 0xf4, 0xba, 0x6d, 0x07, 0xce, 0x5b, 0xf8, 0x6a,
	0xd1, 0xff, 0x1e, 0x17, 0x69, 0xd9, 0x3a, 0x95, 0x51, 0x52, 0x98, 0xb5, 0xe6, 0xd4, 0x70, 0x7e,
	0x5d, 0x66, 0x37, 0x00, 0x6f, 0xc8, 0x13, 0xec, 0x8e, 0x47, 0xb0, 0xc7, 0x85, 0x7e, 0xdd, 0x9a,
	0x87, 0xb9, 0x02, 0xc7, 0x6e, 0x6c, 0x29, 0x11, 0xf2, 0x57, 0xdc, 0x4a, 0xe1, 0x21, 0x0f, 0x9e,
	0x00, 0xb4, 0x7a, 0x7a, 0x66, 0x50, 0xad, 0xbb, 0xb5, 0x00, 0x43, 0x09, 0xd3, 0xb4, 0x49, 0x17,
	0xae, 0xa9, 0xf4, 0xa6, 0x98, 0x77, 0x64, 0xb6, 0x2d, 0xef, 0xba, 0xd2, 0xda, 0xfe, 0x51, 0x23,
	0x57, 0xf4, 0xeb, 0xf1, 0x68, 0xc0, 0x23, 0x78, 0x92, 0x84, 0x3d, 0xa8, 0x68, 0x0e, 0x05, 0xa0,
	0xe2, 0x32, 0x1e, 0xe9, 0x3c, 0x1f, 0x5e, 0x82, 0xa9, 0xcc, 0x9c, 0x67, 0xaf, 0x30, 0x1e, 0x9d,
	0x41, 0xc4, 0x20, 0xf2, 0x60, 0x0f, 0xa0, 0xe2, 0x15, 0x56, 0xc2, 0x5a, 0xcd, 0x89, 0xd3, 0x14,
	0xa5, 0xfd, 0x6b, 0x8d, 0x5c, 0xd3, 0x0b, 0xd1, 0x15, 0x34, 0x8a, 0xa9, 0x27, 0xbd, 0x1d, 0xb0,
	0x90, 0xa1, 0xf9, 0x77, 0xb8, 0x69, 0xb4, 0xd5, 0xef, 0x70, 0x17, 0x49, 0xca, 0x07, 0x27, 0x2b,
	0x7b, 0x80, 0xde, 0xe0, 0x80, 0xf7, 0x59, 0xd4, 0xe2, 0xd1, 0x29, 0xeb, 0x9b, 0x8b, 0x2b, 0x05,
	0x16, 0x7b, 0x5e, 0xc3, 0x12, 0x5d, 0x6a, 0xb2, 0xcf, 0x68, 0x10, 0x00, 0x66, 0xd9, 0x1a, 0x5b,
	0x51, 0x01, 0x68, 0xd5, 0x8a, 0x4a, 0xf8, 0xbc, 0x15, 0xc9, 0x82, 0x7a, 0x4c, 0xc3, 0x5e, 0x22,
	0xfa, 0x20, 0x0e, 0x21, 0x4a, 0xcc, 0x05, 0x55, 0x82, 0x6a, 0xd9, 0xf5, 0xe9, 0x7f, 0xab, 0xe8,
	0x7f, 0xd5, 0xc8, 0x87, 0x93, 0x7a, 0x6d, 0x25, 0x31, 0xf2, 0x10, 0x44, 0x27, 0x19, 0x8d, 0xb8,
	0x40, 0xb5, 0xa2, 0x0f, 0x2d, 0x8a, 0x71, 0x8a, 0xa9, 0x65, 0xbf, 0xb8, 0x0c, 0x35, 0xef, 0xf9,
	0xeb, 0x6d, 0xc0, 0xee, 0x80, 0x89, 0xf4, 0x77, 0xc4, 0x71, 0xc7, 0x1f, 0x2a, 0x43, 0xc6, 0x49,
	0x72, 0x06, 0x41, 0xbb, 0x79, 0x7f, 0xf6, 0xc7, 0xc9, 0x98, 0x2f, 0xaf, 0xeb, 0x63, 0xf0, 0x78,
	0xb4, 0xc7, 0x02, 0xc8, 0xe7, 0x1a, 0xe3, 0xd9, 0xbc, 0x00, 0xb7, 0x7a, 0x6c, 0xcc, 0x60, 0x65,
	0x2e, 0x76, 0x6e, 0x92, 0x0f, 0x24, 0x2f, 0xff, 0x65, 0xbe, 0x48, 0x4c, 0xef, 0xb0, 0xa3, 0x5a,
	0xef, 0x8d, 0xf4, 0x8f, 0xed, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x24, 0x59, 0xcd, 0x03, 0x34,
	0x18, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BizdirectMasterdataServiceClient is the client API for BizdirectMasterdataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BizdirectMasterdataServiceClient interface {
	// Get All Partner Details
	GetAllPartners(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PartnerListResponse, error)
	// Get Partner Attributes
	GetPartnerAttributes(ctx context.Context, in *PartnerAttributeRequest, opts ...grpc.CallOption) (*PartnerAttributeResponse, error)
	// Get Partner with all Attributes
	GetPartnerWithAllAttributes(ctx context.Context, in *PartnerAllAttributeRequest, opts ...grpc.CallOption) (*PartnerAllAttributeResponse, error)
	//Get all Attributes list
	GetAllAttributes(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AllAttributesResponse, error)
	//Save all partner attributes
	AddPartnerAttributes(ctx context.Context, in *AddPartnerAttributesRequest, opts ...grpc.CallOption) (*ResponseStatus, error)
	//Get partner attributes for sdk
	GetPartnerSdkAttributes(ctx context.Context, in *PartnerSdkRequest, opts ...grpc.CallOption) (*PartnerSdkResponse, error)
	//Get partner
	GetPartner(ctx context.Context, in *GetPartnerRequest, opts ...grpc.CallOption) (*PartnerResponse, error)
	// Get Partner Details By Any Combination of:
	// 1. CategoryVendorId
	// 2. CountryId
	GetPartners(ctx context.Context, in *PartnerRequest, opts ...grpc.CallOption) (*PartnerListResponse, error)
	// Enable or Disable Mentioned Entities By Any Combination of:
	// 1. PartnerId
	// 2. CategoryId
	UpdatePartners(ctx context.Context, in *PartnerUpdateRequest, opts ...grpc.CallOption) (*ResponseStatus, error)
	// Get All Category Details
	GetAllCategories(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CategoryListResponse, error)
	// Validate Entity By Id
	ValidateEntity(ctx context.Context, in *EntityValidateRequest, opts ...grpc.CallOption) (*EntityValidateResponse, error)
	// Returns Top Level Categories By Any Combination of:
	// 1. CategoryVendorId
	// 2. CountryId
	// 3. PartnerId
	GetCategories(ctx context.Context, in *CategoryRequest, opts ...grpc.CallOption) (*CategoryListResponse, error)
	// Enable or Disable Mentioned Entities By Any Combination of:
	// 1. PartnerId AND CountryId
	UpdateCategories(ctx context.Context, in *CategoryUpdateRequest, opts ...grpc.CallOption) (*ResponseStatus, error)
	// Get All CategoryVendors Details
	GetAllCategoryVendor(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CategoryVendorListResponse, error)
	// Get CategoryVendor Details By Any Combination of:
	// 1. CategoryId
	// 2. CountryId
	// 3. PartnerId
	GetCategoryVendor(ctx context.Context, in *CategoryVendorRequest, opts ...grpc.CallOption) (*CategoryVendorListResponse, error)
	// Enable or Disable Mentioned Entities By Any Combination of:
	// 1. PartnerId
	// 2. CategoryId
	// 3. CountryId
	UpdateCategoryVendor(ctx context.Context, in *CategoryVendorUpdateRequest, opts ...grpc.CallOption) (*ResponseStatus, error)
	// Get All Country Details
	GetAllCountries(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CountryListResponse, error)
	GetCountryInfo(ctx context.Context, in *CountryInfoRequest, opts ...grpc.CallOption) (*CountryInfoResponse, error)
	// Get Country Details By Any Combination of:
	// 1. CategoryId
	// 2. CategoryVendorId
	// 3. PartnerId
	// 4. Country Code
	GetCountries(ctx context.Context, in *CountryRequest, opts ...grpc.CallOption) (*CountryListResponse, error)
	// Enable or Disable Mentioned Entities By Any Combination of:
	// 2. CategoryId
	// 3. CountryId
	UpdateCountries(ctx context.Context, in *CountryUpdateRequest, opts ...grpc.CallOption) (*ResponseStatus, error)
	// Get All SubCategory Details
	// 1. categoryId (optional)
	GetAllSubCategories(ctx context.Context, in *AllSubCategoryRequest, opts ...grpc.CallOption) (*CategoryListResponse, error)
	// Get SubCategory Details based on:
	// 1. CategoryId(required)
	// 2. CountryId(optional/ default country india)
	// 3. PartnerId(required)
	// 4. CategoryVendorId(optional)
	// 5. appVersionCode(required)
	// 6. devicetype(required)
	GetSubCategories(ctx context.Context, in *SubCategoryRequest, opts ...grpc.CallOption) (*CategoryListResponse, error)
	GetCityId(ctx context.Context, in *LocationDetailRequest, opts ...grpc.CallOption) (*LocationDetailResponse, error)
	GetOauthProviderDataByName(ctx context.Context, in *OauthProviderDataRequest, opts ...grpc.CallOption) (*OauthProviderDataResponse, error)
	GetOauthProviderDataById(ctx context.Context, in *OauthProviderDataRequest, opts ...grpc.CallOption) (*OauthProviderDataResponse, error)
	GetHolidayCalendar(ctx context.Context, in *GetHolidayCalendarRequest, opts ...grpc.CallOption) (*GetHolidayCalendarResponse, error)
	// add holiday
	AddHolidayCalendar(ctx context.Context, in *HolidayCalendar, opts ...grpc.CallOption) (*GetHolidayCalendarResponse, error)
	// update holiday
	UpdateHolidayCalendar(ctx context.Context, in *HolidayCalendar, opts ...grpc.CallOption) (*GetHolidayCalendarResponse, error)
	// bulk update holiday
	UpdateHolidayCalendarBulk(ctx context.Context, in *HolidayCalendarBulkUpdateRequest, opts ...grpc.CallOption) (*ResponseStatus, error)
	// delete holiday
	DeleteHolidayCalendar(ctx context.Context, in *HolidayCalendarDeleteRequest, opts ...grpc.CallOption) (*ResponseStatus, error)
	GetAllStates(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StateListResponse, error)
	GetPaymentMode(ctx context.Context, in *PaymentModeRequest, opts ...grpc.CallOption) (*PaymentModeResponse, error)
	GetMetadata(ctx context.Context, in *MetadataRequest, opts ...grpc.CallOption) (*MetadataResponse, error)
	// Get Grid
	GetGridList(ctx context.Context, in *GetGridListRequest, opts ...grpc.CallOption) (*GetGridListResponse, error)
	// Adding a new tile
	AddTile(ctx context.Context, in *TileRequest, opts ...grpc.CallOption) (*TileResponse, error)
	// Updating a tile
	UpdateTile(ctx context.Context, in *Tile, opts ...grpc.CallOption) (*TileResponse, error)
	// Create a new Grid with previously created tiles
	AddGrid(ctx context.Context, in *AddGridRequest, opts ...grpc.CallOption) (*AddGridResponse, error)
	// Link a grid with a partner
	AssociateGridToPartners(ctx context.Context, in *AssociateGridWithPartnersRequest, opts ...grpc.CallOption) (*ResponseStatus, error)
	GetAllCities(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CityListResponse, error)
	GetCityInfo(ctx context.Context, in *CityInfoRequest, opts ...grpc.CallOption) (*CityInfoResponse, error)
	GetAllCitiesForState(ctx context.Context, in *CityStateRequest, opts ...grpc.CallOption) (*CityListResponse, error)
	GetCheckoutTypeForPartner(ctx context.Context, in *CheckoutTypeRequest, opts ...grpc.CallOption) (*CheckoutTypeResponse, error)
	GetPartnerSecret(ctx context.Context, in *PartnerSecretRequest, opts ...grpc.CallOption) (*PartnerSecretResponse, error)
	GetPaymentModeList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PaymentModeListResponse, error)
	ValidatePhoneNumber(ctx context.Context, in *PhoneNumberValidationRequest, opts ...grpc.CallOption) (*PhoneNumberValidationResponse, error)
	GetConvenienceFee(ctx context.Context, in *ConvenienceFeeRequest, opts ...grpc.CallOption) (*ConvenienceFeeResponse, error)
	ValidateTransactionLimit(ctx context.Context, in *TransactionLimitRequest, opts ...grpc.CallOption) (*TransactionLimitResponse, error)
	FetchLoginConfig(ctx context.Context, in *LoginModeRequest, opts ...grpc.CallOption) (*LoginModeResponse, error)
	GetWalletLimit(ctx context.Context, in *WalletLimitRequest, opts ...grpc.CallOption) (*WalletLimitResponse, error)
	GetHamburgerMenu(ctx context.Context, in *HamburgerMenuRequest, opts ...grpc.CallOption) (*HamburgerMenuResponse, error)
	// Get partner configured customer support config.
	GetPartnerCustomerSupportConfig(ctx context.Context, in *PartnerCustomerSupportRequest, opts ...grpc.CallOption) (*PartnerCustomerSupportResponse, error)
	// Get thirdy party config keys.
	GetThirdPartySdkConfig(ctx context.Context, in *ThirdPartySdkConfigRequest, opts ...grpc.CallOption) (*ThirdPartySdkConfigResponse, error)
	// Gets email and attachment information related to vendor communication for reconciliation
	GetReconFileMetadata(ctx context.Context, in *ReconFileMetadataRequest, opts ...grpc.CallOption) (*ReconFileMetadataResponse, error)
}

type bizdirectMasterdataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBizdirectMasterdataServiceClient(cc grpc.ClientConnInterface) BizdirectMasterdataServiceClient {
	return &bizdirectMasterdataServiceClient{cc}
}

func (c *bizdirectMasterdataServiceClient) GetAllPartners(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PartnerListResponse, error) {
	out := new(PartnerListResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetAllPartners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) GetPartnerAttributes(ctx context.Context, in *PartnerAttributeRequest, opts ...grpc.CallOption) (*PartnerAttributeResponse, error) {
	out := new(PartnerAttributeResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetPartnerAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) GetPartnerWithAllAttributes(ctx context.Context, in *PartnerAllAttributeRequest, opts ...grpc.CallOption) (*PartnerAllAttributeResponse, error) {
	out := new(PartnerAllAttributeResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetPartnerWithAllAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) GetAllAttributes(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AllAttributesResponse, error) {
	out := new(AllAttributesResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetAllAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) AddPartnerAttributes(ctx context.Context, in *AddPartnerAttributesRequest, opts ...grpc.CallOption) (*ResponseStatus, error) {
	out := new(ResponseStatus)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/AddPartnerAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) GetPartnerSdkAttributes(ctx context.Context, in *PartnerSdkRequest, opts ...grpc.CallOption) (*PartnerSdkResponse, error) {
	out := new(PartnerSdkResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetPartnerSdkAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) GetPartner(ctx context.Context, in *GetPartnerRequest, opts ...grpc.CallOption) (*PartnerResponse, error) {
	out := new(PartnerResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetPartner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) GetPartners(ctx context.Context, in *PartnerRequest, opts ...grpc.CallOption) (*PartnerListResponse, error) {
	out := new(PartnerListResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetPartners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) UpdatePartners(ctx context.Context, in *PartnerUpdateRequest, opts ...grpc.CallOption) (*ResponseStatus, error) {
	out := new(ResponseStatus)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/UpdatePartners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) GetAllCategories(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CategoryListResponse, error) {
	out := new(CategoryListResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetAllCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) ValidateEntity(ctx context.Context, in *EntityValidateRequest, opts ...grpc.CallOption) (*EntityValidateResponse, error) {
	out := new(EntityValidateResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/ValidateEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) GetCategories(ctx context.Context, in *CategoryRequest, opts ...grpc.CallOption) (*CategoryListResponse, error) {
	out := new(CategoryListResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) UpdateCategories(ctx context.Context, in *CategoryUpdateRequest, opts ...grpc.CallOption) (*ResponseStatus, error) {
	out := new(ResponseStatus)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/UpdateCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) GetAllCategoryVendor(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CategoryVendorListResponse, error) {
	out := new(CategoryVendorListResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetAllCategoryVendor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) GetCategoryVendor(ctx context.Context, in *CategoryVendorRequest, opts ...grpc.CallOption) (*CategoryVendorListResponse, error) {
	out := new(CategoryVendorListResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetCategoryVendor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) UpdateCategoryVendor(ctx context.Context, in *CategoryVendorUpdateRequest, opts ...grpc.CallOption) (*ResponseStatus, error) {
	out := new(ResponseStatus)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/UpdateCategoryVendor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) GetAllCountries(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CountryListResponse, error) {
	out := new(CountryListResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetAllCountries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) GetCountryInfo(ctx context.Context, in *CountryInfoRequest, opts ...grpc.CallOption) (*CountryInfoResponse, error) {
	out := new(CountryInfoResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetCountryInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) GetCountries(ctx context.Context, in *CountryRequest, opts ...grpc.CallOption) (*CountryListResponse, error) {
	out := new(CountryListResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetCountries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) UpdateCountries(ctx context.Context, in *CountryUpdateRequest, opts ...grpc.CallOption) (*ResponseStatus, error) {
	out := new(ResponseStatus)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/UpdateCountries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) GetAllSubCategories(ctx context.Context, in *AllSubCategoryRequest, opts ...grpc.CallOption) (*CategoryListResponse, error) {
	out := new(CategoryListResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetAllSubCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) GetSubCategories(ctx context.Context, in *SubCategoryRequest, opts ...grpc.CallOption) (*CategoryListResponse, error) {
	out := new(CategoryListResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetSubCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) GetCityId(ctx context.Context, in *LocationDetailRequest, opts ...grpc.CallOption) (*LocationDetailResponse, error) {
	out := new(LocationDetailResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/getCityId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) GetOauthProviderDataByName(ctx context.Context, in *OauthProviderDataRequest, opts ...grpc.CallOption) (*OauthProviderDataResponse, error) {
	out := new(OauthProviderDataResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetOauthProviderDataByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) GetOauthProviderDataById(ctx context.Context, in *OauthProviderDataRequest, opts ...grpc.CallOption) (*OauthProviderDataResponse, error) {
	out := new(OauthProviderDataResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetOauthProviderDataById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) GetHolidayCalendar(ctx context.Context, in *GetHolidayCalendarRequest, opts ...grpc.CallOption) (*GetHolidayCalendarResponse, error) {
	out := new(GetHolidayCalendarResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetHolidayCalendar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) AddHolidayCalendar(ctx context.Context, in *HolidayCalendar, opts ...grpc.CallOption) (*GetHolidayCalendarResponse, error) {
	out := new(GetHolidayCalendarResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/AddHolidayCalendar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) UpdateHolidayCalendar(ctx context.Context, in *HolidayCalendar, opts ...grpc.CallOption) (*GetHolidayCalendarResponse, error) {
	out := new(GetHolidayCalendarResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/UpdateHolidayCalendar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) UpdateHolidayCalendarBulk(ctx context.Context, in *HolidayCalendarBulkUpdateRequest, opts ...grpc.CallOption) (*ResponseStatus, error) {
	out := new(ResponseStatus)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/UpdateHolidayCalendarBulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) DeleteHolidayCalendar(ctx context.Context, in *HolidayCalendarDeleteRequest, opts ...grpc.CallOption) (*ResponseStatus, error) {
	out := new(ResponseStatus)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/DeleteHolidayCalendar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) GetAllStates(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StateListResponse, error) {
	out := new(StateListResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetAllStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) GetPaymentMode(ctx context.Context, in *PaymentModeRequest, opts ...grpc.CallOption) (*PaymentModeResponse, error) {
	out := new(PaymentModeResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetPaymentMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) GetMetadata(ctx context.Context, in *MetadataRequest, opts ...grpc.CallOption) (*MetadataResponse, error) {
	out := new(MetadataResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) GetGridList(ctx context.Context, in *GetGridListRequest, opts ...grpc.CallOption) (*GetGridListResponse, error) {
	out := new(GetGridListResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetGridList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) AddTile(ctx context.Context, in *TileRequest, opts ...grpc.CallOption) (*TileResponse, error) {
	out := new(TileResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/AddTile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) UpdateTile(ctx context.Context, in *Tile, opts ...grpc.CallOption) (*TileResponse, error) {
	out := new(TileResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/UpdateTile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) AddGrid(ctx context.Context, in *AddGridRequest, opts ...grpc.CallOption) (*AddGridResponse, error) {
	out := new(AddGridResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/AddGrid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) AssociateGridToPartners(ctx context.Context, in *AssociateGridWithPartnersRequest, opts ...grpc.CallOption) (*ResponseStatus, error) {
	out := new(ResponseStatus)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/AssociateGridToPartners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) GetAllCities(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CityListResponse, error) {
	out := new(CityListResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetAllCities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) GetCityInfo(ctx context.Context, in *CityInfoRequest, opts ...grpc.CallOption) (*CityInfoResponse, error) {
	out := new(CityInfoResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetCityInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) GetAllCitiesForState(ctx context.Context, in *CityStateRequest, opts ...grpc.CallOption) (*CityListResponse, error) {
	out := new(CityListResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetAllCitiesForState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) GetCheckoutTypeForPartner(ctx context.Context, in *CheckoutTypeRequest, opts ...grpc.CallOption) (*CheckoutTypeResponse, error) {
	out := new(CheckoutTypeResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetCheckoutTypeForPartner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) GetPartnerSecret(ctx context.Context, in *PartnerSecretRequest, opts ...grpc.CallOption) (*PartnerSecretResponse, error) {
	out := new(PartnerSecretResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetPartnerSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) GetPaymentModeList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PaymentModeListResponse, error) {
	out := new(PaymentModeListResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetPaymentModeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) ValidatePhoneNumber(ctx context.Context, in *PhoneNumberValidationRequest, opts ...grpc.CallOption) (*PhoneNumberValidationResponse, error) {
	out := new(PhoneNumberValidationResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/ValidatePhoneNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) GetConvenienceFee(ctx context.Context, in *ConvenienceFeeRequest, opts ...grpc.CallOption) (*ConvenienceFeeResponse, error) {
	out := new(ConvenienceFeeResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetConvenienceFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) ValidateTransactionLimit(ctx context.Context, in *TransactionLimitRequest, opts ...grpc.CallOption) (*TransactionLimitResponse, error) {
	out := new(TransactionLimitResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/ValidateTransactionLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) FetchLoginConfig(ctx context.Context, in *LoginModeRequest, opts ...grpc.CallOption) (*LoginModeResponse, error) {
	out := new(LoginModeResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/FetchLoginConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) GetWalletLimit(ctx context.Context, in *WalletLimitRequest, opts ...grpc.CallOption) (*WalletLimitResponse, error) {
	out := new(WalletLimitResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetWalletLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) GetHamburgerMenu(ctx context.Context, in *HamburgerMenuRequest, opts ...grpc.CallOption) (*HamburgerMenuResponse, error) {
	out := new(HamburgerMenuResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetHamburgerMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) GetPartnerCustomerSupportConfig(ctx context.Context, in *PartnerCustomerSupportRequest, opts ...grpc.CallOption) (*PartnerCustomerSupportResponse, error) {
	out := new(PartnerCustomerSupportResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetPartnerCustomerSupportConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) GetThirdPartySdkConfig(ctx context.Context, in *ThirdPartySdkConfigRequest, opts ...grpc.CallOption) (*ThirdPartySdkConfigResponse, error) {
	out := new(ThirdPartySdkConfigResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetThirdPartySdkConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizdirectMasterdataServiceClient) GetReconFileMetadata(ctx context.Context, in *ReconFileMetadataRequest, opts ...grpc.CallOption) (*ReconFileMetadataResponse, error) {
	out := new(ReconFileMetadataResponse)
	err := c.cc.Invoke(ctx, "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetReconFileMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BizdirectMasterdataServiceServer is the server API for BizdirectMasterdataService service.
type BizdirectMasterdataServiceServer interface {
	// Get All Partner Details
	GetAllPartners(context.Context, *empty.Empty) (*PartnerListResponse, error)
	// Get Partner Attributes
	GetPartnerAttributes(context.Context, *PartnerAttributeRequest) (*PartnerAttributeResponse, error)
	// Get Partner with all Attributes
	GetPartnerWithAllAttributes(context.Context, *PartnerAllAttributeRequest) (*PartnerAllAttributeResponse, error)
	//Get all Attributes list
	GetAllAttributes(context.Context, *empty.Empty) (*AllAttributesResponse, error)
	//Save all partner attributes
	AddPartnerAttributes(context.Context, *AddPartnerAttributesRequest) (*ResponseStatus, error)
	//Get partner attributes for sdk
	GetPartnerSdkAttributes(context.Context, *PartnerSdkRequest) (*PartnerSdkResponse, error)
	//Get partner
	GetPartner(context.Context, *GetPartnerRequest) (*PartnerResponse, error)
	// Get Partner Details By Any Combination of:
	// 1. CategoryVendorId
	// 2. CountryId
	GetPartners(context.Context, *PartnerRequest) (*PartnerListResponse, error)
	// Enable or Disable Mentioned Entities By Any Combination of:
	// 1. PartnerId
	// 2. CategoryId
	UpdatePartners(context.Context, *PartnerUpdateRequest) (*ResponseStatus, error)
	// Get All Category Details
	GetAllCategories(context.Context, *empty.Empty) (*CategoryListResponse, error)
	// Validate Entity By Id
	ValidateEntity(context.Context, *EntityValidateRequest) (*EntityValidateResponse, error)
	// Returns Top Level Categories By Any Combination of:
	// 1. CategoryVendorId
	// 2. CountryId
	// 3. PartnerId
	GetCategories(context.Context, *CategoryRequest) (*CategoryListResponse, error)
	// Enable or Disable Mentioned Entities By Any Combination of:
	// 1. PartnerId AND CountryId
	UpdateCategories(context.Context, *CategoryUpdateRequest) (*ResponseStatus, error)
	// Get All CategoryVendors Details
	GetAllCategoryVendor(context.Context, *empty.Empty) (*CategoryVendorListResponse, error)
	// Get CategoryVendor Details By Any Combination of:
	// 1. CategoryId
	// 2. CountryId
	// 3. PartnerId
	GetCategoryVendor(context.Context, *CategoryVendorRequest) (*CategoryVendorListResponse, error)
	// Enable or Disable Mentioned Entities By Any Combination of:
	// 1. PartnerId
	// 2. CategoryId
	// 3. CountryId
	UpdateCategoryVendor(context.Context, *CategoryVendorUpdateRequest) (*ResponseStatus, error)
	// Get All Country Details
	GetAllCountries(context.Context, *empty.Empty) (*CountryListResponse, error)
	GetCountryInfo(context.Context, *CountryInfoRequest) (*CountryInfoResponse, error)
	// Get Country Details By Any Combination of:
	// 1. CategoryId
	// 2. CategoryVendorId
	// 3. PartnerId
	// 4. Country Code
	GetCountries(context.Context, *CountryRequest) (*CountryListResponse, error)
	// Enable or Disable Mentioned Entities By Any Combination of:
	// 2. CategoryId
	// 3. CountryId
	UpdateCountries(context.Context, *CountryUpdateRequest) (*ResponseStatus, error)
	// Get All SubCategory Details
	// 1. categoryId (optional)
	GetAllSubCategories(context.Context, *AllSubCategoryRequest) (*CategoryListResponse, error)
	// Get SubCategory Details based on:
	// 1. CategoryId(required)
	// 2. CountryId(optional/ default country india)
	// 3. PartnerId(required)
	// 4. CategoryVendorId(optional)
	// 5. appVersionCode(required)
	// 6. devicetype(required)
	GetSubCategories(context.Context, *SubCategoryRequest) (*CategoryListResponse, error)
	GetCityId(context.Context, *LocationDetailRequest) (*LocationDetailResponse, error)
	GetOauthProviderDataByName(context.Context, *OauthProviderDataRequest) (*OauthProviderDataResponse, error)
	GetOauthProviderDataById(context.Context, *OauthProviderDataRequest) (*OauthProviderDataResponse, error)
	GetHolidayCalendar(context.Context, *GetHolidayCalendarRequest) (*GetHolidayCalendarResponse, error)
	// add holiday
	AddHolidayCalendar(context.Context, *HolidayCalendar) (*GetHolidayCalendarResponse, error)
	// update holiday
	UpdateHolidayCalendar(context.Context, *HolidayCalendar) (*GetHolidayCalendarResponse, error)
	// bulk update holiday
	UpdateHolidayCalendarBulk(context.Context, *HolidayCalendarBulkUpdateRequest) (*ResponseStatus, error)
	// delete holiday
	DeleteHolidayCalendar(context.Context, *HolidayCalendarDeleteRequest) (*ResponseStatus, error)
	GetAllStates(context.Context, *empty.Empty) (*StateListResponse, error)
	GetPaymentMode(context.Context, *PaymentModeRequest) (*PaymentModeResponse, error)
	GetMetadata(context.Context, *MetadataRequest) (*MetadataResponse, error)
	// Get Grid
	GetGridList(context.Context, *GetGridListRequest) (*GetGridListResponse, error)
	// Adding a new tile
	AddTile(context.Context, *TileRequest) (*TileResponse, error)
	// Updating a tile
	UpdateTile(context.Context, *Tile) (*TileResponse, error)
	// Create a new Grid with previously created tiles
	AddGrid(context.Context, *AddGridRequest) (*AddGridResponse, error)
	// Link a grid with a partner
	AssociateGridToPartners(context.Context, *AssociateGridWithPartnersRequest) (*ResponseStatus, error)
	GetAllCities(context.Context, *empty.Empty) (*CityListResponse, error)
	GetCityInfo(context.Context, *CityInfoRequest) (*CityInfoResponse, error)
	GetAllCitiesForState(context.Context, *CityStateRequest) (*CityListResponse, error)
	GetCheckoutTypeForPartner(context.Context, *CheckoutTypeRequest) (*CheckoutTypeResponse, error)
	GetPartnerSecret(context.Context, *PartnerSecretRequest) (*PartnerSecretResponse, error)
	GetPaymentModeList(context.Context, *empty.Empty) (*PaymentModeListResponse, error)
	ValidatePhoneNumber(context.Context, *PhoneNumberValidationRequest) (*PhoneNumberValidationResponse, error)
	GetConvenienceFee(context.Context, *ConvenienceFeeRequest) (*ConvenienceFeeResponse, error)
	ValidateTransactionLimit(context.Context, *TransactionLimitRequest) (*TransactionLimitResponse, error)
	FetchLoginConfig(context.Context, *LoginModeRequest) (*LoginModeResponse, error)
	GetWalletLimit(context.Context, *WalletLimitRequest) (*WalletLimitResponse, error)
	GetHamburgerMenu(context.Context, *HamburgerMenuRequest) (*HamburgerMenuResponse, error)
	// Get partner configured customer support config.
	GetPartnerCustomerSupportConfig(context.Context, *PartnerCustomerSupportRequest) (*PartnerCustomerSupportResponse, error)
	// Get thirdy party config keys.
	GetThirdPartySdkConfig(context.Context, *ThirdPartySdkConfigRequest) (*ThirdPartySdkConfigResponse, error)
	// Gets email and attachment information related to vendor communication for reconciliation
	GetReconFileMetadata(context.Context, *ReconFileMetadataRequest) (*ReconFileMetadataResponse, error)
}

// UnimplementedBizdirectMasterdataServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBizdirectMasterdataServiceServer struct {
}

func (*UnimplementedBizdirectMasterdataServiceServer) GetAllPartners(ctx context.Context, req *empty.Empty) (*PartnerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPartners not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) GetPartnerAttributes(ctx context.Context, req *PartnerAttributeRequest) (*PartnerAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartnerAttributes not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) GetPartnerWithAllAttributes(ctx context.Context, req *PartnerAllAttributeRequest) (*PartnerAllAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartnerWithAllAttributes not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) GetAllAttributes(ctx context.Context, req *empty.Empty) (*AllAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAttributes not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) AddPartnerAttributes(ctx context.Context, req *AddPartnerAttributesRequest) (*ResponseStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPartnerAttributes not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) GetPartnerSdkAttributes(ctx context.Context, req *PartnerSdkRequest) (*PartnerSdkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartnerSdkAttributes not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) GetPartner(ctx context.Context, req *GetPartnerRequest) (*PartnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartner not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) GetPartners(ctx context.Context, req *PartnerRequest) (*PartnerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartners not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) UpdatePartners(ctx context.Context, req *PartnerUpdateRequest) (*ResponseStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePartners not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) GetAllCategories(ctx context.Context, req *empty.Empty) (*CategoryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCategories not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) ValidateEntity(ctx context.Context, req *EntityValidateRequest) (*EntityValidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateEntity not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) GetCategories(ctx context.Context, req *CategoryRequest) (*CategoryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategories not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) UpdateCategories(ctx context.Context, req *CategoryUpdateRequest) (*ResponseStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategories not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) GetAllCategoryVendor(ctx context.Context, req *empty.Empty) (*CategoryVendorListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCategoryVendor not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) GetCategoryVendor(ctx context.Context, req *CategoryVendorRequest) (*CategoryVendorListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryVendor not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) UpdateCategoryVendor(ctx context.Context, req *CategoryVendorUpdateRequest) (*ResponseStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategoryVendor not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) GetAllCountries(ctx context.Context, req *empty.Empty) (*CountryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCountries not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) GetCountryInfo(ctx context.Context, req *CountryInfoRequest) (*CountryInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountryInfo not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) GetCountries(ctx context.Context, req *CountryRequest) (*CountryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountries not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) UpdateCountries(ctx context.Context, req *CountryUpdateRequest) (*ResponseStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCountries not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) GetAllSubCategories(ctx context.Context, req *AllSubCategoryRequest) (*CategoryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSubCategories not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) GetSubCategories(ctx context.Context, req *SubCategoryRequest) (*CategoryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubCategories not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) GetCityId(ctx context.Context, req *LocationDetailRequest) (*LocationDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCityId not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) GetOauthProviderDataByName(ctx context.Context, req *OauthProviderDataRequest) (*OauthProviderDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOauthProviderDataByName not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) GetOauthProviderDataById(ctx context.Context, req *OauthProviderDataRequest) (*OauthProviderDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOauthProviderDataById not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) GetHolidayCalendar(ctx context.Context, req *GetHolidayCalendarRequest) (*GetHolidayCalendarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHolidayCalendar not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) AddHolidayCalendar(ctx context.Context, req *HolidayCalendar) (*GetHolidayCalendarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHolidayCalendar not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) UpdateHolidayCalendar(ctx context.Context, req *HolidayCalendar) (*GetHolidayCalendarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHolidayCalendar not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) UpdateHolidayCalendarBulk(ctx context.Context, req *HolidayCalendarBulkUpdateRequest) (*ResponseStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHolidayCalendarBulk not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) DeleteHolidayCalendar(ctx context.Context, req *HolidayCalendarDeleteRequest) (*ResponseStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHolidayCalendar not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) GetAllStates(ctx context.Context, req *empty.Empty) (*StateListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStates not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) GetPaymentMode(ctx context.Context, req *PaymentModeRequest) (*PaymentModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentMode not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) GetMetadata(ctx context.Context, req *MetadataRequest) (*MetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadata not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) GetGridList(ctx context.Context, req *GetGridListRequest) (*GetGridListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGridList not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) AddTile(ctx context.Context, req *TileRequest) (*TileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTile not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) UpdateTile(ctx context.Context, req *Tile) (*TileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTile not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) AddGrid(ctx context.Context, req *AddGridRequest) (*AddGridResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGrid not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) AssociateGridToPartners(ctx context.Context, req *AssociateGridWithPartnersRequest) (*ResponseStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssociateGridToPartners not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) GetAllCities(ctx context.Context, req *empty.Empty) (*CityListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCities not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) GetCityInfo(ctx context.Context, req *CityInfoRequest) (*CityInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCityInfo not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) GetAllCitiesForState(ctx context.Context, req *CityStateRequest) (*CityListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCitiesForState not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) GetCheckoutTypeForPartner(ctx context.Context, req *CheckoutTypeRequest) (*CheckoutTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheckoutTypeForPartner not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) GetPartnerSecret(ctx context.Context, req *PartnerSecretRequest) (*PartnerSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartnerSecret not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) GetPaymentModeList(ctx context.Context, req *empty.Empty) (*PaymentModeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentModeList not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) ValidatePhoneNumber(ctx context.Context, req *PhoneNumberValidationRequest) (*PhoneNumberValidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatePhoneNumber not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) GetConvenienceFee(ctx context.Context, req *ConvenienceFeeRequest) (*ConvenienceFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConvenienceFee not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) ValidateTransactionLimit(ctx context.Context, req *TransactionLimitRequest) (*TransactionLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateTransactionLimit not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) FetchLoginConfig(ctx context.Context, req *LoginModeRequest) (*LoginModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchLoginConfig not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) GetWalletLimit(ctx context.Context, req *WalletLimitRequest) (*WalletLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletLimit not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) GetHamburgerMenu(ctx context.Context, req *HamburgerMenuRequest) (*HamburgerMenuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHamburgerMenu not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) GetPartnerCustomerSupportConfig(ctx context.Context, req *PartnerCustomerSupportRequest) (*PartnerCustomerSupportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartnerCustomerSupportConfig not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) GetThirdPartySdkConfig(ctx context.Context, req *ThirdPartySdkConfigRequest) (*ThirdPartySdkConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThirdPartySdkConfig not implemented")
}
func (*UnimplementedBizdirectMasterdataServiceServer) GetReconFileMetadata(ctx context.Context, req *ReconFileMetadataRequest) (*ReconFileMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReconFileMetadata not implemented")
}

func RegisterBizdirectMasterdataServiceServer(s *grpc.Server, srv BizdirectMasterdataServiceServer) {
	s.RegisterService(&_BizdirectMasterdataService_serviceDesc, srv)
}

func _BizdirectMasterdataService_GetAllPartners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).GetAllPartners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetAllPartners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).GetAllPartners(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_GetPartnerAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartnerAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).GetPartnerAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetPartnerAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).GetPartnerAttributes(ctx, req.(*PartnerAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_GetPartnerWithAllAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartnerAllAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).GetPartnerWithAllAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetPartnerWithAllAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).GetPartnerWithAllAttributes(ctx, req.(*PartnerAllAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_GetAllAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).GetAllAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetAllAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).GetAllAttributes(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_AddPartnerAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPartnerAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).AddPartnerAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/AddPartnerAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).AddPartnerAttributes(ctx, req.(*AddPartnerAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_GetPartnerSdkAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartnerSdkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).GetPartnerSdkAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetPartnerSdkAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).GetPartnerSdkAttributes(ctx, req.(*PartnerSdkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_GetPartner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).GetPartner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetPartner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).GetPartner(ctx, req.(*GetPartnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_GetPartners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).GetPartners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetPartners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).GetPartners(ctx, req.(*PartnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_UpdatePartners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartnerUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).UpdatePartners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/UpdatePartners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).UpdatePartners(ctx, req.(*PartnerUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_GetAllCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).GetAllCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetAllCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).GetAllCategories(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_ValidateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).ValidateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/ValidateEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).ValidateEntity(ctx, req.(*EntityValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_GetCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).GetCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).GetCategories(ctx, req.(*CategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_UpdateCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).UpdateCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/UpdateCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).UpdateCategories(ctx, req.(*CategoryUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_GetAllCategoryVendor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).GetAllCategoryVendor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetAllCategoryVendor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).GetAllCategoryVendor(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_GetCategoryVendor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryVendorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).GetCategoryVendor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetCategoryVendor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).GetCategoryVendor(ctx, req.(*CategoryVendorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_UpdateCategoryVendor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryVendorUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).UpdateCategoryVendor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/UpdateCategoryVendor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).UpdateCategoryVendor(ctx, req.(*CategoryVendorUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_GetAllCountries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).GetAllCountries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetAllCountries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).GetAllCountries(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_GetCountryInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountryInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).GetCountryInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetCountryInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).GetCountryInfo(ctx, req.(*CountryInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_GetCountries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).GetCountries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetCountries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).GetCountries(ctx, req.(*CountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_UpdateCountries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountryUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).UpdateCountries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/UpdateCountries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).UpdateCountries(ctx, req.(*CountryUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_GetAllSubCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllSubCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).GetAllSubCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetAllSubCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).GetAllSubCategories(ctx, req.(*AllSubCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_GetSubCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).GetSubCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetSubCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).GetSubCategories(ctx, req.(*SubCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_GetCityId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocationDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).GetCityId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetCityId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).GetCityId(ctx, req.(*LocationDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_GetOauthProviderDataByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthProviderDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).GetOauthProviderDataByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetOauthProviderDataByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).GetOauthProviderDataByName(ctx, req.(*OauthProviderDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_GetOauthProviderDataById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthProviderDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).GetOauthProviderDataById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetOauthProviderDataById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).GetOauthProviderDataById(ctx, req.(*OauthProviderDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_GetHolidayCalendar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHolidayCalendarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).GetHolidayCalendar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetHolidayCalendar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).GetHolidayCalendar(ctx, req.(*GetHolidayCalendarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_AddHolidayCalendar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HolidayCalendar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).AddHolidayCalendar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/AddHolidayCalendar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).AddHolidayCalendar(ctx, req.(*HolidayCalendar))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_UpdateHolidayCalendar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HolidayCalendar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).UpdateHolidayCalendar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/UpdateHolidayCalendar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).UpdateHolidayCalendar(ctx, req.(*HolidayCalendar))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_UpdateHolidayCalendarBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HolidayCalendarBulkUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).UpdateHolidayCalendarBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/UpdateHolidayCalendarBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).UpdateHolidayCalendarBulk(ctx, req.(*HolidayCalendarBulkUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_DeleteHolidayCalendar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HolidayCalendarDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).DeleteHolidayCalendar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/DeleteHolidayCalendar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).DeleteHolidayCalendar(ctx, req.(*HolidayCalendarDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_GetAllStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).GetAllStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetAllStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).GetAllStates(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_GetPaymentMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).GetPaymentMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetPaymentMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).GetPaymentMode(ctx, req.(*PaymentModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_GetMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).GetMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).GetMetadata(ctx, req.(*MetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_GetGridList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGridListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).GetGridList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetGridList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).GetGridList(ctx, req.(*GetGridListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_AddTile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).AddTile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/AddTile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).AddTile(ctx, req.(*TileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_UpdateTile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).UpdateTile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/UpdateTile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).UpdateTile(ctx, req.(*Tile))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_AddGrid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGridRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).AddGrid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/AddGrid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).AddGrid(ctx, req.(*AddGridRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_AssociateGridToPartners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssociateGridWithPartnersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).AssociateGridToPartners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/AssociateGridToPartners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).AssociateGridToPartners(ctx, req.(*AssociateGridWithPartnersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_GetAllCities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).GetAllCities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetAllCities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).GetAllCities(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_GetCityInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CityInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).GetCityInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetCityInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).GetCityInfo(ctx, req.(*CityInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_GetAllCitiesForState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CityStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).GetAllCitiesForState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetAllCitiesForState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).GetAllCitiesForState(ctx, req.(*CityStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_GetCheckoutTypeForPartner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckoutTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).GetCheckoutTypeForPartner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetCheckoutTypeForPartner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).GetCheckoutTypeForPartner(ctx, req.(*CheckoutTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_GetPartnerSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartnerSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).GetPartnerSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetPartnerSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).GetPartnerSecret(ctx, req.(*PartnerSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_GetPaymentModeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).GetPaymentModeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetPaymentModeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).GetPaymentModeList(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_ValidatePhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhoneNumberValidationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).ValidatePhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/ValidatePhoneNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).ValidatePhoneNumber(ctx, req.(*PhoneNumberValidationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_GetConvenienceFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvenienceFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).GetConvenienceFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetConvenienceFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).GetConvenienceFee(ctx, req.(*ConvenienceFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_ValidateTransactionLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).ValidateTransactionLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/ValidateTransactionLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).ValidateTransactionLimit(ctx, req.(*TransactionLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_FetchLoginConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).FetchLoginConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/FetchLoginConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).FetchLoginConfig(ctx, req.(*LoginModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_GetWalletLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).GetWalletLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetWalletLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).GetWalletLimit(ctx, req.(*WalletLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_GetHamburgerMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HamburgerMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).GetHamburgerMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetHamburgerMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).GetHamburgerMenu(ctx, req.(*HamburgerMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_GetPartnerCustomerSupportConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartnerCustomerSupportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).GetPartnerCustomerSupportConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetPartnerCustomerSupportConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).GetPartnerCustomerSupportConfig(ctx, req.(*PartnerCustomerSupportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_GetThirdPartySdkConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThirdPartySdkConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).GetThirdPartySdkConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetThirdPartySdkConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).GetThirdPartySdkConfig(ctx, req.(*ThirdPartySdkConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizdirectMasterdataService_GetReconFileMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReconFileMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizdirectMasterdataServiceServer).GetReconFileMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gonuclei.masterdata.v1.BizdirectMasterdataService/GetReconFileMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizdirectMasterdataServiceServer).GetReconFileMetadata(ctx, req.(*ReconFileMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BizdirectMasterdataService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.gonuclei.masterdata.v1.BizdirectMasterdataService",
	HandlerType: (*BizdirectMasterdataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllPartners",
			Handler:    _BizdirectMasterdataService_GetAllPartners_Handler,
		},
		{
			MethodName: "GetPartnerAttributes",
			Handler:    _BizdirectMasterdataService_GetPartnerAttributes_Handler,
		},
		{
			MethodName: "GetPartnerWithAllAttributes",
			Handler:    _BizdirectMasterdataService_GetPartnerWithAllAttributes_Handler,
		},
		{
			MethodName: "GetAllAttributes",
			Handler:    _BizdirectMasterdataService_GetAllAttributes_Handler,
		},
		{
			MethodName: "AddPartnerAttributes",
			Handler:    _BizdirectMasterdataService_AddPartnerAttributes_Handler,
		},
		{
			MethodName: "GetPartnerSdkAttributes",
			Handler:    _BizdirectMasterdataService_GetPartnerSdkAttributes_Handler,
		},
		{
			MethodName: "GetPartner",
			Handler:    _BizdirectMasterdataService_GetPartner_Handler,
		},
		{
			MethodName: "GetPartners",
			Handler:    _BizdirectMasterdataService_GetPartners_Handler,
		},
		{
			MethodName: "UpdatePartners",
			Handler:    _BizdirectMasterdataService_UpdatePartners_Handler,
		},
		{
			MethodName: "GetAllCategories",
			Handler:    _BizdirectMasterdataService_GetAllCategories_Handler,
		},
		{
			MethodName: "ValidateEntity",
			Handler:    _BizdirectMasterdataService_ValidateEntity_Handler,
		},
		{
			MethodName: "GetCategories",
			Handler:    _BizdirectMasterdataService_GetCategories_Handler,
		},
		{
			MethodName: "UpdateCategories",
			Handler:    _BizdirectMasterdataService_UpdateCategories_Handler,
		},
		{
			MethodName: "GetAllCategoryVendor",
			Handler:    _BizdirectMasterdataService_GetAllCategoryVendor_Handler,
		},
		{
			MethodName: "GetCategoryVendor",
			Handler:    _BizdirectMasterdataService_GetCategoryVendor_Handler,
		},
		{
			MethodName: "UpdateCategoryVendor",
			Handler:    _BizdirectMasterdataService_UpdateCategoryVendor_Handler,
		},
		{
			MethodName: "GetAllCountries",
			Handler:    _BizdirectMasterdataService_GetAllCountries_Handler,
		},
		{
			MethodName: "GetCountryInfo",
			Handler:    _BizdirectMasterdataService_GetCountryInfo_Handler,
		},
		{
			MethodName: "GetCountries",
			Handler:    _BizdirectMasterdataService_GetCountries_Handler,
		},
		{
			MethodName: "UpdateCountries",
			Handler:    _BizdirectMasterdataService_UpdateCountries_Handler,
		},
		{
			MethodName: "GetAllSubCategories",
			Handler:    _BizdirectMasterdataService_GetAllSubCategories_Handler,
		},
		{
			MethodName: "GetSubCategories",
			Handler:    _BizdirectMasterdataService_GetSubCategories_Handler,
		},
		{
			MethodName: "getCityId",
			Handler:    _BizdirectMasterdataService_GetCityId_Handler,
		},
		{
			MethodName: "GetOauthProviderDataByName",
			Handler:    _BizdirectMasterdataService_GetOauthProviderDataByName_Handler,
		},
		{
			MethodName: "GetOauthProviderDataById",
			Handler:    _BizdirectMasterdataService_GetOauthProviderDataById_Handler,
		},
		{
			MethodName: "GetHolidayCalendar",
			Handler:    _BizdirectMasterdataService_GetHolidayCalendar_Handler,
		},
		{
			MethodName: "AddHolidayCalendar",
			Handler:    _BizdirectMasterdataService_AddHolidayCalendar_Handler,
		},
		{
			MethodName: "UpdateHolidayCalendar",
			Handler:    _BizdirectMasterdataService_UpdateHolidayCalendar_Handler,
		},
		{
			MethodName: "UpdateHolidayCalendarBulk",
			Handler:    _BizdirectMasterdataService_UpdateHolidayCalendarBulk_Handler,
		},
		{
			MethodName: "DeleteHolidayCalendar",
			Handler:    _BizdirectMasterdataService_DeleteHolidayCalendar_Handler,
		},
		{
			MethodName: "GetAllStates",
			Handler:    _BizdirectMasterdataService_GetAllStates_Handler,
		},
		{
			MethodName: "GetPaymentMode",
			Handler:    _BizdirectMasterdataService_GetPaymentMode_Handler,
		},
		{
			MethodName: "GetMetadata",
			Handler:    _BizdirectMasterdataService_GetMetadata_Handler,
		},
		{
			MethodName: "GetGridList",
			Handler:    _BizdirectMasterdataService_GetGridList_Handler,
		},
		{
			MethodName: "AddTile",
			Handler:    _BizdirectMasterdataService_AddTile_Handler,
		},
		{
			MethodName: "UpdateTile",
			Handler:    _BizdirectMasterdataService_UpdateTile_Handler,
		},
		{
			MethodName: "AddGrid",
			Handler:    _BizdirectMasterdataService_AddGrid_Handler,
		},
		{
			MethodName: "AssociateGridToPartners",
			Handler:    _BizdirectMasterdataService_AssociateGridToPartners_Handler,
		},
		{
			MethodName: "GetAllCities",
			Handler:    _BizdirectMasterdataService_GetAllCities_Handler,
		},
		{
			MethodName: "GetCityInfo",
			Handler:    _BizdirectMasterdataService_GetCityInfo_Handler,
		},
		{
			MethodName: "GetAllCitiesForState",
			Handler:    _BizdirectMasterdataService_GetAllCitiesForState_Handler,
		},
		{
			MethodName: "GetCheckoutTypeForPartner",
			Handler:    _BizdirectMasterdataService_GetCheckoutTypeForPartner_Handler,
		},
		{
			MethodName: "GetPartnerSecret",
			Handler:    _BizdirectMasterdataService_GetPartnerSecret_Handler,
		},
		{
			MethodName: "GetPaymentModeList",
			Handler:    _BizdirectMasterdataService_GetPaymentModeList_Handler,
		},
		{
			MethodName: "ValidatePhoneNumber",
			Handler:    _BizdirectMasterdataService_ValidatePhoneNumber_Handler,
		},
		{
			MethodName: "GetConvenienceFee",
			Handler:    _BizdirectMasterdataService_GetConvenienceFee_Handler,
		},
		{
			MethodName: "ValidateTransactionLimit",
			Handler:    _BizdirectMasterdataService_ValidateTransactionLimit_Handler,
		},
		{
			MethodName: "FetchLoginConfig",
			Handler:    _BizdirectMasterdataService_FetchLoginConfig_Handler,
		},
		{
			MethodName: "GetWalletLimit",
			Handler:    _BizdirectMasterdataService_GetWalletLimit_Handler,
		},
		{
			MethodName: "GetHamburgerMenu",
			Handler:    _BizdirectMasterdataService_GetHamburgerMenu_Handler,
		},
		{
			MethodName: "GetPartnerCustomerSupportConfig",
			Handler:    _BizdirectMasterdataService_GetPartnerCustomerSupportConfig_Handler,
		},
		{
			MethodName: "GetThirdPartySdkConfig",
			Handler:    _BizdirectMasterdataService_GetThirdPartySdkConfig_Handler,
		},
		{
			MethodName: "GetReconFileMetadata",
			Handler:    _BizdirectMasterdataService_GetReconFileMetadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bizdirect-masterdata-service.proto",
}
